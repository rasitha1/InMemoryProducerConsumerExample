
@{
    ViewBag.Title = "Console Log";
}



@section Styles
{
    <style type="text/css">
        .xcontainer {
            background-color: black;
            border: thick solid #808080;
            padding: 10px;
            margin: 10px;
            overflow-y: auto;
            overflow-x: hidden;
            color: white;
        }

        .text-success {
            color: white;
        }

        .text-info {
            color: lightgray;
        }

        .text-warning {
            color: yellow;
        }

        .text-danger {
            color: red;
        }
    </style>
}

<div id="x" class="tbl margin-top">
    <div>
        <div>
            <div class="xcontainer">
                <div>
                    <ul id="consoleContainer"></ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <!--Script references. -->
    <script type="application/javascript" src="~/lib/console-log-html/console-log-html.min.js"></script>
    <!--Reference the SignalR library. -->
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <!--Add script to update the page and send messages.-->
    <script type="text/javascript">
        var rootPath = '@Url.Content("~")';
        document.addEventListener('DOMContentLoaded',
            function() {
                // Start the connection.
                var connection = new signalR.HubConnectionBuilder()
                    .withUrl(rootPath + '/hubs/log')
                    .build();

                // Create a function that the hub can call to broadcast messages.
                connection.on('WriteLogMessage',
                    function(m) {
                        writeLogEvent(m.level, m.message);
                    });
                connection.on('WriteBatch',
                    function(batch) {
                        for (i = 0; i < batch.length; i++) {
                            let m = batch[i];
                            writeLogEvent(m.level, m.message);
                        }
                    });


                function writeLogEvent(level, message) {
                    let list = document.getElementById("consoleContainer");

                    if (list != null && list.childNodes.length >= 200)
                        list.removeChild(list.lastChild);

                    if (level === 1)
                        console.debug(message);
                    else if (level === 2)
                        console.info(message);
                    else if (level === 3)
                        console.warn(message);
                    else if (level === 4 || level === 5)
                        console.error(message);
                    else
                        console.log(message);
                }

                connection.start()
                    .then(function() {
                        // Redirect log messages
                        ConsoleLogHTML.connect(document.getElementById("consoleContainer"), undefined, false, false);
                        console.log('connection started');
                    })
                    .catch(error => {
                        console.error(error.message);
                    });
            });
    </script>

}
